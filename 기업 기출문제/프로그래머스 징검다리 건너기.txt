#프로그래머스 징검다리 건너기 - 2019 카카오
#과거에 풀었다가 효율성 한 문제가 초과나서 건너뛰었던 문제

import copy

def solution(stones, k):
    low, high = 1, max(stones)
    #이분탐색 이용하면 가볍게 풀림 low, high는 인원수를 이용
    while low <= high:

        tmp = copy.deepcopy(stones)
        mid = (low + high) // 2
        flag = 0
        max_flag = 0  # 0이하가 지속되는 최대 길이
        for i in range(len(tmp)):
            tmp[i] -= mid

        for i in tmp:
            if i <= 0:
                flag += 1
            else:
                flag = 0
            max_flag = max(flag, max_flag)

        if max_flag >= k:
            high = mid - 1
        else:
            low = mid + 1
    answer = low
    return answer
print(solution([2, 4, 5, 3, 2, 1, 4, 2, 5, 1], 3))

''' 과거에 풀었던 방법 지금 어떻게 푼건지 기억이 안남
from collections import deque
def solution(stones, k):
    window = deque(stones[:k])
    loc_max = max(window)
    global_min = loc_max
    for i in range(k, len(stones)):
        leftpop = window.popleft()
        window.append(stones[i])
        if leftpop == loc_max:
            loc_max = max(window)
            global_min = min(global_min, loc_max)
    return global_min
'''