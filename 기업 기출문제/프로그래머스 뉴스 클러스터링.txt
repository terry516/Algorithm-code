#프로그래머스 뉴스 클러스터링 - 카카오 2018
#머리가 아프다. 한 문제가 시간초과가 난다. counter함수와 compile함수의 사용

import copy
def solution(str1, str2):
    str1_set = list()
    str2_set = list()

    for i in range(len(str1)-1):
        if str1[i:i+2].isalpha():
            str1_set.append((str1[i:i+2].lower()))
    for i in range(len(str2)-1):
        if str2[i:i + 2].isalpha():
            str2_set.append((str2[i:i + 2].lower()))

    temp = copy.deepcopy(str2_set)
    a = []
    for i in str1_set:
        if i in temp:
            temp.remove(i)
            a.append(i)

    b = len(str1_set) + len(str2_set) - len(a)
    if a == set() and b == set():
        answer = 65536
    else:
        answer = int(65536*(len(a)/b))
    return answer

'''정답코드
import re
from collections import Counter

pattern = re.compile('[a-z][a-z]')


def preprocessing(content):
    result = []
    for i in range(0, len(content) - 1):
        two_letter = content[i:i + 2]
        if pattern.search(two_letter):
            result.append(two_letter)
    return result


def solution(str1, str2):
    # 두 개의 문자열에 대해서 소문자로 처리
    str1 = str1.lower()
    str2 = str2.lower()

    if str1 == str2:  # 일치한다면 유사도는 1
        return 65536

    str1 = preprocessing(str1)
    str2 = preprocessing(str2)

    counter_1 = Counter(str1)
    counter_2 = Counter(str2)
    intersections = counter_1 & counter_2  # 교집합
    intersections = sum(list(intersections.values()))

    unions = counter_1 | counter_2  # 합집합
    unions = sum(list(unions.values()))
    return int(intersections / unions * 65536)

print(solution('aa1+aa2','AAAA12'))
'''